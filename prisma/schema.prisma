// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Levels {
    N5
    N4
    N3
    N2
    N1
}

enum QuestionTypes {
    vocabulary
    grammar
    reading
    listening
}

enum Roles {
    admin
    user
}

model User {
    id       Int    @id @default(autoincrement())
    email    String? @unique
    phone    String? @unique
    password String
    name     String
    role     Roles

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    receipts Receipt[]
}

model Receipt {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Exam {
    id        Int      @id @default(autoincrement())
    tests     Test[]
    level     Levels
    title     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Test Model
model Test {
    id    Int    @id @default(autoincrement())
    level Levels

    title       String // Title of the test, e.g., "N5 Vocabulary Test"
    description String? // Additional details about the test
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    questions Question[] // Relation to questions in the test

    Exam   Exam? @relation(fields: [examId], references: [id])
    examId Int?
}

// Question Model
model Question {
    id Int @id @default(autoincrement())

    type    QuestionTypes
    content String // The question text or prompt

    level Levels

    passageId Int? // For vocabulary questions, can store the vocabulary passage ID
    passage   Passage? @relation(fields: [passageId], references: [id])

    audioUrl String? // For listening questions, URL to audio file
    imageUrl String? // For listening questions, URL to image file

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    options            String[] // Relation to answer options
    correctOptionIndex Int? // Index of correct answer option

    Test      Test?    @relation(fields: [testId], references: [id])
    testId    Int?
    Section   Section? @relation(fields: [sectionId], references: [id])
    sectionId Int?
}

// Section Model (Optional)
model Section {
    id          Int     @id @default(autoincrement())
    name        String // e.g., "Vocabulary", "Grammar", "Reading", "Listening"
    description String? // Description or instructions for the section

    questions Question[]
}

model Passage {
    id       Int        @id @default(autoincrement())
    text     String
    Question Question[]
}
